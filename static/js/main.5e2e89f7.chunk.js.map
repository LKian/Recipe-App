{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","serving","totalTime","label","ingredientLines","className","style","recipe","src","alt","map","ingredient","recipeDetailsContainer","recipeDetails","subsectionIcon","icon","faFireAlt","size","Math","round","faUserFriends","faClock","require","config","path","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","process","response","console","log","json","data","hits","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","key","yield","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0JACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,gBAAkB,gCAAgC,uBAAyB,uCAAuC,cAAgB,gC,8KCyDrKC,EApDA,SAAC,GAQT,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,SACAC,EAKI,EALJA,MACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,MACAC,EACI,EADJA,gBAEA,OACE,yBAAKC,UAAWC,IAAMC,QACpB,4BAAKT,GACL,yBAAKU,IAAKR,EAAOS,IAAKN,IACtB,4BACGC,EAAgBM,KAAI,SAAAC,GAAU,OAC7B,4BAAKA,OAIT,yBAAKN,UAAWC,IAAMM,wBACpB,yBAAKP,UAAWC,IAAMO,eACpB,kBAAC,IAAD,CACER,UAAWC,IAAMQ,eACjBC,KAAMC,IACNC,KAAK,OAEP,2BAAIC,KAAKC,MAAMpB,IACf,wCAEF,yBAAKM,UAAWC,IAAMO,eACpB,kBAAC,IAAD,CACER,UAAWC,IAAMQ,eACjBC,KAAMK,IACNH,KAAK,OAEP,2BAAIhB,GACJ,wCAEF,yBAAKI,UAAWC,IAAMO,eACpB,kBAAC,IAAD,CACER,UAAWC,IAAMQ,eACjBC,KAAMM,IACNJ,KAAK,OAEP,2BAAIf,GACJ,0C,MC/CVoB,EAAQ,IAAUC,OAAO,CAAEC,KAAM,iBAEjC,IAyEeC,EAzEH,WACV,IADgB,EAMcC,mBAAS,IANvB,mBAMTC,EANS,KAMAC,EANA,OAQYF,mBAAS,IARrB,mBAQTG,EARS,KAQDC,EARC,OASUJ,mBAAS,WATnB,mBASTK,EATS,KASFC,EATE,KAehBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAnBfM,WAmBe,oBAlBdA,qCAiBG,cACXC,EADW,OAIjBC,QAAQC,IAAI,YAAaF,GAJR,SAMEA,EAASG,OANX,OAMXC,EANW,OAOjBd,EAAWc,EAAKC,MAChBJ,QAAQC,IAAIE,EAAKC,MARA,2CAAH,qDAsBhB,OACE,yBAAKtC,UAAU,OACb,0BAAMuC,SARQ,SAACC,GACjBA,EAAEC,iBACFd,EAASH,GACTC,EAAU,KAKmBzB,UAAU,eACnC,2BACEA,UAAU,aACV0C,KAAK,OACLC,YAAY,wBACZC,MAAOpB,EACPqB,SAnBa,SAACL,GACpBf,EAAUe,EAAEM,OAAOF,OACnBV,QAAQC,IAAIX,MAmBR,4BAAQxB,UAAU,gBAAgB0C,KAAK,UAAvC,WAIF,yBAAK1C,UAAU,WACZsB,EAAQjB,KAAI,SAACH,GAAD,OACX,kBAAC,EAAD,CACE6C,IAAK7C,EAAOA,OAAOJ,MACnBL,MAAOS,EAAOA,OAAOJ,MACrBJ,SAAUQ,EAAOA,OAAOR,SACxBE,QAASM,EAAOA,OAAO8C,MACvBnD,UAAWK,EAAOA,OAAOL,UACzBF,MAAOO,EAAOA,OAAOP,MACrBG,MAAOI,EAAOA,OAAOJ,MACrBC,gBAAiBG,EAAOA,OAAOH,wBC3DvBkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.5e2e89f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"recipeContainer\":\"recipe_recipeContainer__2l1RE\",\"recipeDetailsContainer\":\"recipe_recipeDetailsContainer__1Ms8n\",\"recipeDetails\":\"recipe_recipeDetails__2yJjf\"};","import React from \"react\";\r\nimport style from \"./recipe.module.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClock } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faUserFriends, faFireAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Recipe = ({\r\n  title,\r\n  calories,\r\n  image,\r\n  serving,\r\n  totalTime,\r\n  label,\r\n  ingredientLines\r\n}) => {\r\n  return (\r\n    <div className={style.recipe}>\r\n      <h2>{title}</h2>\r\n      <img src={image} alt={label} />\r\n      <ul>\r\n        {ingredientLines.map(ingredient => (\r\n          <li>{ingredient}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      <div className={style.recipeDetailsContainer}>\r\n        <div className={style.recipeDetails}>\r\n          <FontAwesomeIcon\r\n            className={style.subsectionIcon}\r\n            icon={faFireAlt}\r\n            size=\"2x\"\r\n          />\r\n          <p>{Math.round(calories)}</p>\r\n          <p>Calories</p>\r\n        </div>\r\n        <div className={style.recipeDetails}>\r\n          <FontAwesomeIcon\r\n            className={style.subsectionIcon}\r\n            icon={faUserFriends}\r\n            size=\"2x\"\r\n          />\r\n          <p>{serving}</p>\r\n          <p>Servings</p>\r\n        </div>\r\n        <div className={style.recipeDetails}>\r\n          <FontAwesomeIcon\r\n            className={style.subsectionIcon}\r\n            icon={faClock}\r\n            size=\"2x\"\r\n          />\r\n          <p>{totalTime}</p>\r\n          <p>Minutes</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\n\nrequire(\"dotenv\").config({ path: \"./config.env\" });\n\nconst App = () => {\n  const APP_ID = process.env.REACT_APP_API_ID;\n  const APP_KEY = process.env.REACT_APP_API_KEY;\n\n  // const exampleReq = `https://api.edamam.com/search?q=chicken&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  const [recipes, setRecipes] = useState([]);\n  // const [count, setCount] = useState(0);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  // useEffect(() => {\n  //   console.log(`Effect has been run ${count} times.`);\n  // }, [count]); // this runs each time count changes bc there is a count in the bracket.  if [] is empty, it only runs 1x\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    console.log(\"response \", response);\n\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          placeholder=\"Enter search terms...\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map((recipe) => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            serving={recipe.recipe.yield}\n            totalTime={recipe.recipe.totalTime}\n            image={recipe.recipe.image}\n            label={recipe.recipe.label}\n            ingredientLines={recipe.recipe.ingredientLines}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n// REACT_APP_API_ID=\"cadb6b6a\"\n// REACT_APP_API_KEY=\"960460011076a1d3037f72a2e264ffe8\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}